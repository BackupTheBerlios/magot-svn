Magot TODO :

0.1 final :
- make the 0.1 release + register freshmeat, PiPy, planetPython
- make a link to the projects group page on BerliOS.
- add 2 screenshots on berlios
- add a link to the SVN magot repo

0.2 : Improve the Accounting Model

- improve display:
    date display is not uniform
    amount should deal with 000 000
    opposite account editor should be right justified
    None should be displayed as empty, not 'None'
    refresh accountTree when expanding an account
    display vertical bar on accountTree between Account & desc & balance
    display well balances in accountTree when the vertical scroll-bar is here
- Split : allow transaction to have more than 2 entries (aka split)
- add action/memo for entry
- don't ask save modifications? when sorting
- on Windows, balances are truncated when vertical scroll bar is shown
- add tool bar : JumpToOppositeAccount, OpenAccount/CloseAccount, EditAccount, HierarchyOptions
- better formatted output for command 'gui accounts'
- dev design : 
    access a notebook page by its view only, not its model ?
    AccountHierarchy = GeneralLedger?
- finish RefData module :
    integrate currency in Money
    rounding decimal.getcontext().rounding="ROUND_HALF_UP" for EURO
    __str__
    use of locale for each currency
- __repr__ of DetailAccount


0.3 : Creation/Deletion

- add an empty entry at end of each AccountLedger
- copy/cut/paste of cell/entry/transaction
- create/duplicate/delete tx
- add/remove entry
- create/delete account


0.4 : Data Mining

- SELECT transactions/entries by multi-criteria (period/date, amount, desc, ...)
- NAVIGATE/MODIFY any item of the selection as usually
- REFINE/UNION/MINUS on the whole selection
- ORGANIZE, sort/group/filter/hide the selection
- DUMP a report of the selection
- APPLY behaviour on items of the selection : check, print, update field/entry,


0.5 : Official Reports

- income statement (profit and loss)
- balance sheet
- cash flow

0.6 : Standardization

- import qif and gnucash format
- create all standard account types + standard account hierachy
- Num column should propose : ATM, Virement, ...
- unicode + i18n + l10n


1.0

- better command lines
- unit tests with http://www.access.wvu.edu/class/acctutor/tableofc.htm + doctest
- doc


post 1.0
- make true persistence / multi user : SQLlite, DURUS/ZODB/Pypersyst, Metakit, SQLObject, Roundup HyperDB, PyDO ?
- manage financial instrument; equity/debt/option portfolio
- budgets/accounting periods
- Invoices/Payment/Parties
